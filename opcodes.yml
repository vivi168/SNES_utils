modes:
  acc:
    syntax: 'acc'
    regexp: !ruby/regexp /^$/
    example: ''
  imp:
    syntax: 'imp'
    regexp: !ruby/regexp /^$/
    example: ''
  imm:
    syntax: 'imm'
    regexp: !ruby/regexp /^\$?([0-9a-f]{1,2})$/i
    example: '$00'
  iml:
    syntax: 'iml'
    regexp: !ruby/regexp /^\$?([0-9a-f]{1,2})$/i
    example: '$0000'
  imm8:
    syntax: 'imm8'
    regexp: !ruby/regexp /^#\$?([0-9a-f]{1,2})$/i
    example: '#$00'
  imm16:
    syntax: 'imm16'
    regexp: !ruby/regexp /^#\$?([0-9a-f]{3,4})$/i
    example: '#$0000'
  sr:
    syntax: 'stk,S'
    regexp: !ruby/regexp /^\$?([0-9a-f]{1,2}),S$/i
    example: '$00,S'
  dp:
    syntax: 'dir'
    regexp: !ruby/regexp /^\$?([0-9a-f]{1,2})$/i
    example: '$00'
  dpx:
    syntax: 'dir,X'
    regexp: !ruby/regexp /^\$?([0-9a-f]{1,2}),X$/i
    example: '$00,X'
  dpy:
    syntax: 'dir,Y'
    regexp: !ruby/regexp /^\$?([0-9a-f]{1,2}),Y$/i
    example: '$00,Y'
  idp:
    syntax: '(dir)'
    regexp: !ruby/regexp /^\(\$?([0-9a-f]{1,2})\)$/i
    example: '($00)'
  idx:
    syntax: '(dir,X)'
    regexp: !ruby/regexp /^\(\$?([0-9a-f]{1,2}),X\)$/i
    example: '($00,X)'
  idy:
    syntax: '(dir),Y'
    regexp: !ruby/regexp /^\(\$?([0-9a-f]{1,2})\),Y$/i
    example: '($00),Y'
  idl:
    syntax: '[dir]'
    regexp: !ruby/regexp /^\[\$?([0-9a-f]{1,2})\]$/i
    example: '[$00]'
  idly:
    syntax: '[dir],Y'
    regexp: !ruby/regexp /^\[\$?([0-9a-f]{1,2})\],Y$/i
    example: '[$00],Y'
  isy:
    syntax: '(stk,S),Y'
    regexp: !ruby/regexp /^\(\$?([0-9a-f]{1,2}),S\),Y$/i
    example: '($00,S),Y'
  abs:
    syntax: 'abs'
    regexp: !ruby/regexp /^\$?([0-9a-f]{3,4})$/i
    example: '$0000'
  abx:
    syntax: 'abs,X'
    regexp: !ruby/regexp /^\$?([0-9a-f]{3,4}),X$/i
    example: '$0000,X'
  aby:
    syntax: 'abs,Y'
    regexp: !ruby/regexp /^\$?([0-9a-f]{3,4}),Y$/i
    example: '$0000,Y'
  abl:
    syntax: 'long'
    regexp: !ruby/regexp /^\$?([0-9a-f]{5,6})$/i
    example: '$000000'
  alx:
    syntax: 'long,X'
    regexp: !ruby/regexp /^\$?([0-9a-f]{5,6}),X$/i
    example: '$000000,X'
  ind:
    syntax: '(abs)'
    regexp: !ruby/regexp /^\(\$?([0-9a-f]{3,4})\)$/i
    example: '($0000)'
  iax:
    syntax: '(abs,X)'
    regexp: !ruby/regexp /^\(\$?([0-9a-f]{3,4}),X\)$/i
    example: '($0000,X)'
  ial:
    syntax: '[abs]'
    regexp: !ruby/regexp /^\[\$?([0-9a-f]{3,4})\]$/i
    example: '[$0000]'
  rel:
    syntax: 'rel8'
    regexp: !ruby/regexp /^\$?([0-9a-f]{3,4})$/i
    example: '$0000'
  rell:
    syntax: 'rel16'
    regexp: !ruby/regexp /^\$?([0-9a-f]{3,4})$/i
    example: '$0000'
  bm:
    syntax: 'src,dest'
    regexp: !ruby/regexp /^\$?([0-9a-f]{1,2}),\$?([0-9a-f]{1,2})$/i
    example: '$00,$00'
opcodes:
  adc:
    allowed_modes: [idx, sr, dp, idl, imm8, imm16, abs, abl, idy, idp, isy, dpx, idly, aby, abx, alx]
    code: [61, 63, 65, 67, 69, 69, 6D, 6F, 71, 72, 73, 75, 77, 79, 7D, 7F]
    length: [2, 2, 2, 2, 2, 3, 3, 4, 2, 2, 2, 2, 2, 3, 3, 4]
  sbc:
    allowed_modes: []
    code: []
    length: []
  cmp:
    allowed_modes: []
    code: []
    length: []
  cpx:
    allowed_modes: []
    code: []
    length: []
  cpy:
    allowed_modes: []
    code: []
    length: []
  dec:
    allowed_modes: []
    code: []
    length: []
  dex:
    allowed_modes: []
    code: []
    length: []
  dey:
    allowed_modes: []
    code: []
    length: []
  inc:
    allowed_modes: []
    code: []
    length: []
  inx:
    allowed_modes: []
    code: []
    length: []
  iny:
    allowed_modes: []
    code: []
    length: []
  and:
    allowed_modes: []
    code: []
    length: []
  eor:
    allowed_modes: []
    code: []
    length: []
  ora:
    allowed_modes: []
    code: []
    length: []
  bit:
    allowed_modes: []
    code: []
    length: []
  trb:
    allowed_modes: []
    code: []
    length: []
  tsb:
    allowed_modes: []
    code: []
    length: []
  asl:
    allowed_modes: []
    code: []
    length: []
  lsr:
    allowed_modes: []
    code: []
    length: []
  rol:
    allowed_modes: []
    code: []
    length: []
  ror:
    allowed_modes: []
    code: []
    length: []
  bcc:
    allowed_modes: []
    code: []
    length: []
  bcs:
    allowed_modes: []
    code: []
    length: []
  beq:
    allowed_modes: []
    code: []
    length: []
  bmi:
    allowed_modes: []
    code: []
    length: []
  bne:
    allowed_modes: []
    code: []
    length: []
  bpl:
    allowed_modes: []
    code: []
    length: []
  bra:
    allowed_modes: []
    code: []
    length: []
  bvc:
    allowed_modes: []
    code: []
    length: []
  bvs:
    allowed_modes: []
    code: []
    length: []
  brl:
    allowed_modes: []
    code: []
    length: []
  jmp:
    allowed_modes: []
    code: []
    length: []
  jsl:
    allowed_modes: []
    code: []
    length: []
  jsr:
    allowed_modes: []
    code: []
    length: []
  rtl:
    allowed_modes: []
    code: []
    length: []
  rts:
    allowed_modes: []
    code: []
    length: []
  brk:
    allowed_modes: []
    code: []
    length: []
  cop:
    allowed_modes: []
    code: []
    length: []
  rti:
    allowed_modes: []
    code: []
    length: []
  clc:
    allowed_modes: []
    code: []
    length: []
  cld:
    allowed_modes: []
    code: []
    length: []
  cli:
    allowed_modes: []
    code: []
    length: []
  clv:
    allowed_modes: []
    code: []
    length: []
  sec:
    allowed_modes: []
    code: []
    length: []
  sed:
    allowed_modes: []
    code: []
    length: []
  sei:
    allowed_modes: []
    code: []
    length: []
  rep:
    allowed_modes: []
    code: []
    length: []
  sep:
    allowed_modes: []
    code: []
    length: []
  lda:
    allowed_modes: []
    code: []
    length: []
  ldx:
    allowed_modes: []
    code: []
    length: []
  ldy:
    allowed_modes: []
    code: []
    length: []
  sta:
    allowed_modes: []
    code: []
    length: []
  stx:
    allowed_modes: []
    code: []
    length: []
  sty:
    allowed_modes: []
    code: []
    length: []
  stz:
    allowed_modes: []
    code: []
    length: []
  mvn:
    allowed_modes: []
    code: []
    length: []
  mvp:
    allowed_modes: []
    code: []
    length: []
  nop:
    allowed_modes: []
    code: []
    length: []
  wdm:
    allowed_modes: []
    code: []
    length: []
  pea:
    allowed_modes: []
    code: []
    length: []
  pei:
    allowed_modes: []
    code: []
    length: []
  per:
    allowed_modes: []
    code: []
    length: []
  pha:
    allowed_modes: []
    code: []
    length: []
  phx:
    allowed_modes: []
    code: []
    length: []
  phy:
    allowed_modes: []
    code: []
    length: []
  pla:
    allowed_modes: []
    code: []
    length: []
  plx:
    allowed_modes: []
    code: []
    length: []
  ply:
    allowed_modes: []
    code: []
    length: []
  phb:
    allowed_modes: []
    code: []
    length: []
  phd:
    allowed_modes: []
    code: []
    length: []
  phk:
    allowed_modes: []
    code: []
    length: []
  php:
    allowed_modes: []
    code: []
    length: []
  plb:
    allowed_modes: []
    code: []
    length: []
  pld:
    allowed_modes: []
    code: []
    length: []
  plp:
    allowed_modes: []
    code: []
    length: []
  stp:
    allowed_modes: []
    code: []
    length: []
  wai:
    allowed_modes: []
    code: []
    length: []
  tax:
    allowed_modes: []
    code: []
    length: []
  tay:
    allowed_modes: []
    code: []
    length: []
  tsx:
    allowed_modes: []
    code: []
    length: []
  txa:
    allowed_modes: []
    code: []
    length: []
  txs:
    allowed_modes: []
    code: []
    length: []
  txy:
    allowed_modes: []
    code: []
    length: []
  tya:
    allowed_modes: []
    code: []
    length: []
  tyx:
    allowed_modes: []
    code: []
    length: []
  tcd:
    allowed_modes: []
    code: []
    length: []
  tcs:
    allowed_modes: []
    code: []
    length: []
  tdc:
    allowed_modes: []
    code: []
    length: []
  tsc:
    allowed_modes: []
    code: []
    length: []
  xba:
    allowed_modes: []
    code: []
    length: []
  xce:
    allowed_modes: []
    code: []
    length: []
